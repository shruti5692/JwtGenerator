package com.example.jwtmock.service;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.*;

@Service
public class JwtMockService {

    private final PrivateKey privateKey;   // final, initialized in constructor
    private final long expirationMs;

    public JwtMockService(
            @Value("${jwt.private-key}") String privateKeyBase64,
            @Value("${jwt.expiration}") long expirationMs
    ) throws Exception {
        if (privateKeyBase64 == null || privateKeyBase64.trim().isEmpty()) {
            throw new IllegalStateException("jwt.private-key is not set in application.properties");
        }

        // Decode Base64 private key and build PrivateKey instance
        byte[] keyBytes = Base64.getDecoder().decode(privateKeyBase64.trim());
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        this.privateKey = KeyFactory.getInstance("RSA").generatePrivate(spec);

        // Assign expiration
        this.expirationMs = expirationMs;
    }

    public String generateToken(String username) {
        long nowMillis = System.currentTimeMillis();
        long expMillis = nowMillis + expirationMs;
        long nowSec = nowMillis / 1000L;
        long expSec = expMillis / 1000L;

        Map<String, Object> header = new HashMap<>();
        header.put("typ", "JWT");
        header.put("kid", "E2E_TRUST_SAML_CMB_UAT");
        header.put("alg", "RS256");
        header.put("sch", "urn:aim:token:internal");
        header.put("scv", "1.0");
        header.put("tkv", "1.0");

        Map<String, Object> claims = new HashMap<>();
        claims.put("sub", username);
        claims.put("grp", defaultGroups());
        claims.put("iss", "cmbdsp.uk.hsbc.com");
        claims.put("iat", nowSec);
        claims.put("exp", expSec);
        claims.put("jti", UUID.randomUUID().toString());
        claims.put("sit", "ad:svc:principal");

        // Use the injected privateKey here â€” fully runtime-safe
        return Jwts.builder()
                .setHeader(header)
                .setClaims(claims)
                .signWith(privateKey, SignatureAlgorithm.RS256)
                .compact();
    }

    private List<String> defaultGroups() {
        return Arrays.asList(
                "CN=InfoDir-CB-RPS-NVP-DEV, OU=HBEU, OU=CB_RPS, OU=Applications, OU=Groups, DC=InfoDir, DC=Prod, DC=HSBC",
                "CN=infodir-MyWorkspace-UK-Bereavement-DEV-BR, OU=UK, OU=HBEU, OU=Bereavement, OU=MyWorkspace, OU=Applications, OU=Groups, DC=InfoDir, DC=Prod, DC=HSBC",
                "CN=InfoDir-RBWM-UKB-RPS-CI-DEV, OU=HBEU, OU=RBWM-UKB-RPS-CI, OU=Applications, OU=Groups, DC=InfoDir, DC=Prod, DC=HSBC"
        );
    }
}

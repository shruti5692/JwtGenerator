package com.example.jwtmock.service;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import java.security.KeyPair;
import java.util.*;

import org.springframework.stereotype.Service;

@Service
public class JwtMockService {

    private final KeyPair keyPair;

    public JwtMockService() {
        this.keyPair = KeyUtil.generateRSAKeyPair();
    }

    public String generateMockToken(String username) {
        Map<String, Object> header = new HashMap<>();
        header.put("typ", "JWT");
        header.put("kid", "E2E_TRUST_SAML_CMB_UAT");
        header.put("alg", "RS256");
        header.put("sch", "urn:aim:token:internal");
        header.put("scv", "1.0");
        header.put("tkv", "1.0");

        Map<String, Object> payload = new HashMap<>();
        payload.put("sub", username != null ? username : "GB-SVC-UKBEREV");
        payload.put("grp", Arrays.asList(
                "CN=InfoDir-CB-RPS-NVP-DEV, OU=HBEU, OU=CB_RPS, OU=Applications, OU=Groups, DC=InfoDir, DC=Prod, DC=HSBC",
                "CN=InfoDir-RBWM-UKB-RPS-CI-DEV, OU=HBEU, OU=RBWM-UKB-RPS-CI, OU=Applications, OU=Groups, DC=InfoDir, DC=Prod, DC=HSBC"
        ));
        payload.put("iss", "cmbdsp.uk.hsbc.com");
        payload.put("iat", System.currentTimeMillis() / 1000);
        payload.put("exp", (System.currentTimeMillis() / 1000) + 3600);
        payload.put("jti", UUID.randomUUID().toString());
        payload.put("sit", "ad:svc:principal");

        return Jwts.builder()
                .setHeader(header)
                .setClaims(payload)
                .signWith(keyPair.getPrivate(), SignatureAlgorithm.RS256)
                .compact();
    }
}

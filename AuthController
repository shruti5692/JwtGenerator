package com.example.mocktokenapi.controller;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RestController
public class MockTokenController {

    // Secret key (for mock purpose, can be random)
    private static final SecretKey secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    @GetMapping("/mock/token")
    public Map<String, String> getMockToken() {
        long now = System.currentTimeMillis();
        long expiryTime = now + (60 * 60 * 1000); // 1 hour validity

        // Mock payload (simplified version)
        Map<String, Object> claims = new HashMap<>();
        claims.put("sub", "GB-SVC-UKBEREV");
        claims.put("iss", "cmbdsp.uk.hsbc.com");
        claims.put("sit", "ad:svc:principal");

        // Generate JWT
        String token = Jwts.builder()
                .setHeaderParam("typ", "JWT")
                .setHeaderParam("kid", "E2E_TRUST_SAML_CMB_UAT")
                .setHeaderParam("alg", "RS256") // just mimicking, we actually use HS256 here
                .setClaims(claims)
                .setIssuedAt(new Date(now))
                .setExpiration(new Date(expiryTime))
                .signWith(secretKey, SignatureAlgorithm.HS256)
                .compact();

        // Return only issued_token
        Map<String, String> response = new HashMap<>();
        response.put("issued_token", token);
        return response;
    }
}

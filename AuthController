package com.example.mocktokenapi.controller;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.FileInputStream;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RestController
public class MockTokenController {

    private static final String PRIVATE_KEY_PATH = "src/main/resources/private_key.pem"; // update if needed

    @GetMapping("/mock/token")
    public Map<String, String> getMockToken() throws Exception {
        long now = System.currentTimeMillis();
        long expiryTime = now + (60 * 60 * 1000); // 1 hour validity

        // Load private key
        PrivateKey privateKey = loadPrivateKey(PRIVATE_KEY_PATH);

        // Claims
        Map<String, Object> claims = new HashMap<>();
        claims.put("sub", "GB-SVC-UKBEREV");
        claims.put("iss", "cmbdsp.uk.hsbc.com");
        claims.put("sit", "ad:svc:principal");

        // Build JWT
        String token = Jwts.builder()
                .setHeaderParam("typ", "JWT")
                .setHeaderParam("kid", "E2E_TRUST_SAML_CMB_UAT")
                .setHeaderParam("alg", "RS256")
                .setHeaderParam("sch", "urn:aim:token:internal")
                .setHeaderParam("scv", "1.0")
                .setHeaderParam("tkv", "1.0")
                .setClaims(claims)
                .setIssuedAt(new Date(now))
                .setExpiration(new Date(expiryTime))
                .signWith(privateKey, SignatureAlgorithm.RS256)
                .compact();

        Map<String, String> response = new HashMap<>();
        response.put("issued_token", token);
        return response;
    }

    private PrivateKey loadPrivateKey(String filePath) throws Exception {
        String key = new String(new FileInputStream(filePath).readAllBytes());
        key = key.replaceAll("-----BEGIN PRIVATE KEY-----", "")
                 .replaceAll("-----END PRIVATE KEY-----", "")
                 .replaceAll("\\s+", "");

        byte[] decoded = Base64.getDecoder().decode(key);
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(decoded);
        return KeyFactory.getInstance("RSA").generatePrivate(spec);
    }
}
